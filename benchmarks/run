#!/usr/bin/env node
// vim: syntax=javascript

var fs = require('fs'),
    path = require('path'),
    benchmark = require('benchmark'),
    microtime = require('microtime'),
    bemc = require('bemc');

var bemhtml = fs.readFileSync(path.resolve(
  __dirname,
  '../common.blocks/bemhtml/bemhtml.bemhtml'
)).toString();

var suite = new benchmark.Suite();

fs.readdirSync(__dirname).filter(function(file) {
  return /\-benchmark\.bemhtml$/.test(file);
}).map(function(file) {
  return path.resolve(__dirname, file).replace(/\.bemhtml$/, '');
}).forEach(function(file) {
  var content = bemhtml + '\n' + fs.readFileSync(file + '.bemhtml').toString(),
      name = path.basename(file).replace(/\-benchmark$/, ''),
      json = require(file + '.json'),
      options = {
        cache: bemc.cache.create()
      },
      template = bemc.compile(content, {
        devMode: true,
        engine: 'sort-group',
        cache: /cache/.test(name)
      });

  var bench = suite.add({
    name: name,
    setup: function() {
      var template = this.data.template,
          options = this.data.options,
          json = this.data.json;
    },
    fn: function () {
      template.call(json, options);
    },
    data: {
      options: options,
      json: json,
      template: template
    }
  });
});

suite.on('cycle', function(data) {
  if (data.target.error) console.error(data.target.error.stack);
  console.log(String(data.target));
}).run({ async: true });
